name: 'RealTimeAnalytics'
version: '3.8'
services:
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    environment:
      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"  # Defines the controller voters.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9094,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since weâ€™re running one broker, one replica is enough.
      KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"  # A unique ID for the Kafka cluster.
      ALLOW_PLAINTEXT_LISTENER: "yes"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data:/var/lib/kafka/data  # Store Kafka logs on your local
  cache:
    image: redis:6.2-alpine
    restart: always
    container_name: redis-cache
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - cache:/data
  consumer:
    container_name: consumer-serverless
    build:
      context: ./scripts
      dockerfile: ConsumerDockerFile
    depends_on:
      - kafka
      - cache
    environment:
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CONSUMER_GROUP_ID=event-processor
      - PYTHONUNBUFFERED=1
    restart: on-failure
  producer:
    container_name: external-producer
    build:
      context: ./scripts
      dockerfile: ProducerDockerFile
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - WAIT_SECONDS_AFTER_BATCH=3
      - PYTHONUNBUFFERED=1
    restart: on-failure
  audit:
    container_name: audit-serverless
    build:
      context: ./scripts
      dockerfile: AuditDockerFile
    depends_on:
      - kafka
      - cache
      - mongo
    environment:
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CONSUMER_GROUP_ID=audit
      - MONGODB_URI=mongodb://root:rootpass@mongo:27017/?authSource=admin
      - MONGO_DB=analytics
      - MONGO_COLLECTION=events
      - PYTHONUNBUFFERED=1
    restart: on-failure
  api:
    container_name: api-service
    build:
      context: ./backend
    depends_on:
      - kafka
      - cache
      - consumer
    environment:
      - REDIS_HOST=cache
      - REDIS_PORT=6379
      - REDIS_PASSWORD=eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    restart: on-failure
    ports:
      - "8080:8080"
  web:
    container_name: ui
    depends_on:
      - kafka
      - cache
      - consumer
    build: 
      context: ./frontend/analytics-dashboard
    environment:
      - API_HOST=http://api:8080
    ports:
      - "5173:5173"
    restart: unless-stopped
  mongo:
    image: mongo:7
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"          # optional: expose to host
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpass
      MONGO_INITDB_DATABASE: analytics
    volumes:
      - mongo_data:/data/db
      # Optional: create an app user on first boot
      - ./mongo-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--username", "root", "--password", "rootpass", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    restart: unless-stopped
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: rootpass
      ME_CONFIG_MONGODB_URL: mongodb://root:rootpass@mongo:27017/
      ME_CONFIG_BASICAUTH: "false"
volumes:
  cache:
    driver: local
  mongo_data:
    driver: local